name: Quick Deploy (Development)

on:
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force instance refresh after deployment'
        required: false
        default: false
        type: boolean

env:
  ECR_REPOSITORY: rem-app
  AWS_REGION: ap-south-1
  ASG_NAME: rem-asg

jobs:
  quick-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          
          echo "üî® Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg APP_BUILD=dev-${{ github.sha }} \
            .
          
          echo "üì§ Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "‚úÖ Image pushed successfully!"

      - name: Force instance refresh
        if: ${{ inputs.force_refresh == true }}
        run: |
          echo "üîÑ Forcing instance refresh..."
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"InstanceWarmup": 60, "MinHealthyPercentage": 50}' \
            --region $AWS_REGION

      - name: Wait and verify
        run: |
          if [ "${{ inputs.force_refresh }}" == "true" ]; then
            echo "‚è±Ô∏è  Waiting 2 minutes for instance refresh..."
            sleep 120
          else
            echo "‚è±Ô∏è  Waiting 60 seconds for Watchtower to update..."
            sleep 60
          fi
          
          # Get ALB DNS and test
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names rem-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "üåê Testing: http://$ALB_DNS"
          
          if curl -f -s "http://$ALB_DNS/api/health"; then
            echo "‚úÖ Application is responding!"
            echo "üéâ Quick deploy completed successfully!"
          else
            echo "‚ö†Ô∏è  Application might still be starting up"
          fi