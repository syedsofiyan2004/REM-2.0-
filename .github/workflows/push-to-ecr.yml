name: Deploy to AWS - Complete CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: rem-app
  AWS_REGION: ap-south-1
  ASG_NAME: rem-asg

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        id: build-image
        run: |
          # Build image with build args
          docker build -t $ECR_REPOSITORY:latest \
            --build-arg APP_BUILD=${{ github.sha }} \
            .
          
          # Tag for ECR
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
          
          # Verify the image was pushed with correct build info
          echo "🔍 Verifying image build info..."
          docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:latest printenv APP_BUILD || echo "Could not verify build info"
          echo "image-sha=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Wait for Watchtower to update containers
        run: |
          echo "🚀 New image pushed to ECR!"
          echo "📦 Image: ${{ steps.build-image.outputs.image }}"
          echo "⏱️  Watchtower will detect and update running containers within ~60 seconds"
          echo "🔄 Waiting for deployment to complete..."
          
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names rem-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region $AWS_REGION)
          
          EXPECTED_BUILD="${{ github.sha }}"
          echo "🎯 Expected build: $EXPECTED_BUILD"
          
          # Retry deployment verification up to 5 times with increasing delays
          DEPLOYMENT_VERIFIED=false
          for attempt in {1..5}; do
            echo "📋 Verification attempt $attempt/5..."
            
            if [ $attempt -gt 1 ]; then
              sleep_time=$((30 * attempt))  # 60s, 90s, 120s, 150s
              echo "⏳ Waiting ${sleep_time}s before retry..."
              sleep $sleep_time
            else
              sleep 90  # Initial wait
            fi
            
            VERSION_RESPONSE=$(curl -s "http://$ALB_DNS/api/version" || echo "{}")
            CURRENT_BUILD=$(echo "$VERSION_RESPONSE" | jq -r '.build // "unknown"')
            
            echo "📋 Current build: $CURRENT_BUILD"
            
            if [ "$CURRENT_BUILD" = "$EXPECTED_BUILD" ]; then
              echo "✅ Deployment verified - build matches!"
              DEPLOYMENT_VERIFIED=true
              break
            else
              echo "⚠️  Build mismatch on attempt $attempt"
            fi
          done
          
          if [ "$DEPLOYMENT_VERIFIED" = "false" ]; then
            echo "❌ Deployment verification failed after 5 attempts"
            echo "DEPLOYMENT_MISMATCH=true" >> $GITHUB_ENV
          fi

      - name: Verify deployment
        run: |
          echo "🔍 Checking application health..."
          
          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names rem-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region $AWS_REGION)
          
          echo "🌐 Application URL: http://$ALB_DNS"
          
          # Check health endpoint
          if curl -f -s "http://$ALB_DNS/api/health" > /dev/null; then
            echo "✅ Health check passed - Application is running!"
          else
            echo "❌ Health check failed - There might be an issue"
            exit 1
          fi
          
          # Store URL for later steps
          echo "app-url=http://$ALB_DNS" >> $GITHUB_OUTPUT
        id: verify

      - name: Check if Watchtower update failed
        id: check-watchtower
        run: |
          if [ "$DEPLOYMENT_VERIFIED" = "false" ]; then
            echo "🔍 Watchtower failed to update containers after 5 attempts"
            echo "🚨 This usually means:"
            echo "   1. Watchtower container is not running"
            echo "   2. Docker socket permissions issue"  
            echo "   3. ECR authentication expired"
            echo "needs_manual_intervention=true" >> $GITHUB_OUTPUT
            echo "WATCHTOWER_FAILED=true" >> $GITHUB_ENV
          else
            echo "needs_manual_intervention=false" >> $GITHUB_OUTPUT
          fi

      - name: Manual intervention needed
        if: steps.check-watchtower.outputs.needs_manual_intervention == 'true'
        run: |
          echo "� Watchtower deployment failed - manual intervention required"
          
          # Check if instance refresh is already running
          EXISTING_REFRESH=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --query 'InstanceRefreshes[?Status==`InProgress`] | [0].InstanceRefreshId' \
            --output text \
            --region $AWS_REGION)
          
          if [ "$EXISTING_REFRESH" != "None" ] && [ "$EXISTING_REFRESH" != "" ]; then
            echo "⏳ Instance refresh already in progress: $EXISTING_REFRESH"
            echo "🔄 Waiting for existing refresh to complete..."
            
            # Wait for existing refresh to complete (max 10 minutes)
            for i in {1..20}; do
              sleep 30
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name $ASG_NAME \
                --instance-refresh-ids $EXISTING_REFRESH \
                --query 'InstanceRefreshes[0].Status' \
                --output text \
                --region $AWS_REGION)
              
              echo "📊 Refresh status: $STATUS"
              
              if [ "$STATUS" != "InProgress" ]; then
                echo "✅ Previous refresh completed with status: $STATUS"
                break
              fi
              
              if [ $i -eq 20 ]; then
                echo "⚠️  Timeout waiting for existing refresh"
              fi
            done
          fi
          
          # Start new instance refresh
          echo "🚀 Starting new instance refresh..."
          NEW_REFRESH=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"InstanceWarmup": 60, "MinHealthyPercentage": 50}' \
            --query 'InstanceRefreshId' \
            --output text \
            --region $AWS_REGION 2>/dev/null || echo "FAILED")
          
          if [ "$NEW_REFRESH" != "FAILED" ]; then
            echo "✅ Started instance refresh: $NEW_REFRESH"
            
            # Wait for refresh to show progress
            echo "⏳ Monitoring refresh progress..."
            for i in {1..10}; do
              sleep 30
              PROGRESS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name $ASG_NAME \
                --instance-refresh-ids $NEW_REFRESH \
                --query 'InstanceRefreshes[0].PercentageComplete' \
                --output text \
                --region $AWS_REGION 2>/dev/null || echo "0")
              
              echo "📈 Refresh progress: ${PROGRESS}%"
              
              if [ "$PROGRESS" -eq 100 ]; then
                echo "🎉 Instance refresh completed successfully!"
                break
              fi
            done
          else
            echo "❌ Failed to start instance refresh"
          fi

      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Application Details" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.verify.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 Open Application](${{ steps.verify.outputs.app-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [💾 Health Check](${{ steps.verify.outputs.app-url }}/api/health)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed via Watchtower auto-update*"
