name: Deploy to AWS - Complete CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: rem-app
  AWS_REGION: ap-south-1
  ASG_NAME: rem-asg

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        id: build-image
        run: |
          # Build image with build args
          docker build -t $ECR_REPOSITORY:latest \
            --build-arg APP_BUILD=${{ github.sha }} \
            .
          
          # Tag for ECR
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
          echo "image-sha=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Wait for Watchtower to update containers
        run: |
          echo "🚀 New image pushed to ECR!"
          echo "📦 Image: ${{ steps.build-image.outputs.image }}"
          echo "⏱️  Watchtower will detect and update running containers within ~60 seconds"
          echo "🔄 Waiting 120 seconds for deployment to complete..."
          sleep 120
          
          # Additional verification - check if image was updated
          echo "🔍 Verifying deployment..."
          # Try to detect if the new build is active
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names rem-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region $AWS_REGION)
          
          # Check if the version endpoint shows the new build
          VERSION_RESPONSE=$(curl -s "http://$ALB_DNS/api/version" || echo "{}")
          echo "📋 Current version info: $VERSION_RESPONSE"
          
          # Check if deployment is current
          CURRENT_BUILD=$(echo "$VERSION_RESPONSE" | jq -r '.build // "unknown"')
          EXPECTED_BUILD="${{ github.sha }}"
          
          if [ "$CURRENT_BUILD" = "$EXPECTED_BUILD" ]; then
            echo "✅ Deployment verified - build matches!"
          else
            echo "⚠️  Build mismatch. Expected: $EXPECTED_BUILD, Current: $CURRENT_BUILD"
            echo "DEPLOYMENT_MISMATCH=true" >> $GITHUB_ENV
          fi

      - name: Verify deployment
        run: |
          echo "🔍 Checking application health..."
          
          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names rem-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text \
            --region $AWS_REGION)
          
          echo "🌐 Application URL: http://$ALB_DNS"
          
          # Check health endpoint
          if curl -f -s "http://$ALB_DNS/api/health" > /dev/null; then
            echo "✅ Health check passed - Application is running!"
          else
            echo "❌ Health check failed - There might be an issue"
            exit 1
          fi
          
          # Store URL for later steps
          echo "app-url=http://$ALB_DNS" >> $GITHUB_OUTPUT
        id: verify

      - name: Check if refresh needed
        id: check-refresh
        run: |
          if [ "$DEPLOYMENT_MISMATCH" = "true" ]; then
            echo "needs_refresh=true" >> $GITHUB_OUTPUT
            echo "reason=Build version mismatch detected" >> $GITHUB_OUTPUT
          elif [ "${{ job.status }}" = "failure" ]; then
            echo "needs_refresh=true" >> $GITHUB_OUTPUT
            echo "reason=Health check failed" >> $GITHUB_OUTPUT
          else
            echo "needs_refresh=false" >> $GITHUB_OUTPUT
          fi

      - name: Force refresh instances
        if: steps.check-refresh.outputs.needs_refresh == 'true'
        run: |
          echo "🔄 ${{ steps.check-refresh.outputs.reason }}, forcing instance refresh..."
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"InstanceWarmup": 60, "MinHealthyPercentage": 50}' \
            --region $AWS_REGION || echo "Instance refresh already in progress or failed"

      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Application Details" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.verify.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 Open Application](${{ steps.verify.outputs.app-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [💾 Health Check](${{ steps.verify.outputs.app-url }}/api/health)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed via Watchtower auto-update*"
